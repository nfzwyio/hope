import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as n}from"./app-tSwHPRi-.js";const l={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="第20章-std模块" tabindex="-1"><a class="header-anchor" href="#第20章-std模块"><span>第20章 std模块</span></a></h1><ul><li>引言</li><li>使用你的实现所提供的功能</li><li>使用头文件</li><li>创建你自己的std模块</li><li>建议</li></ul><h2 id="a-1-引言" tabindex="-1"><a class="header-anchor" href="#a-1-引言"><span>A.1 引言</span></a></h2><p>在撰写本文时，遗憾的是， <strong>std模块</strong> [Stroustrup,2021b]尚未成为标准的一部分。 我有合理的希望，它将成为C++23的一部分。本附录提供了一些关于当前如何管理的想法。</p><p><strong>std模块</strong> 的目的是通过单一的 <strong>import std;</strong> 语句，简单且低成本地提供标准库的所有组件。我在各个章节中都依赖于此。提到并命名头文件主要是因为它们是传统的且普遍可用的，部分原因是它们反映了标准库（不完善）的历史组织结构。</p><p>一些标准库组件会将名称（如 <strong>&lt;cmath&gt;</strong> 中的 <strong>sqrt()</strong> ）放入全局命名空间中。 <strong>std</strong> 模块不会这样做，但当我们需要获取这样的全局名称时，我们可以 <strong>import std.compat</strong> 。导入 <strong>std.compat</strong> 而不是 <strong>std</strong> 的唯一真正好的理由是，在仍然可以获得模块带来的编译速度提升的一些好处的同时，避免干扰旧的代码库。</p><p>请注意，模块有意不导出宏。如果你需要宏，请使用 <strong>#include</strong> 。</p><p>模块和头文件共存；也就是说，如果你同时 <strong>#include</strong> 和 <strong>import</strong> 一组相同的声明，你将得到一个一致的程序。这对于大型代码库从依赖头文件到使用模块的演变至关重要。</p><h2 id="a-2-使用你的实现所提供的功能" tabindex="-1"><a class="header-anchor" href="#a-2-使用你的实现所提供的功能"><span>A.2 使用你的实现所提供的功能</span></a></h2><p>幸运的是，我们想要使用的实现可能已经包含在了 <strong>std模块</strong> 中。在这种情况下，我们的首选应该是使用它。它可能被标记为“实验性”的，并且使用它可能需要一些设置或几个编译器选项。因此，首先，探索实现是否提供了 <strong>std模块</strong> 或等效物。例如，目前（2022年春季），Visual Studio提供了许多“实验性”模块，因此使用该实现，我们可以这样定义 <strong>std</strong> 模块：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;regex&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filesystem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;filesystem&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">memory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;memory&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">threading</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;atomic&gt;, &lt;condition_variable&gt;, &lt;future&gt;, &lt;mutex&gt;, &lt;shared_mutex&gt;, &lt;thread&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 所有其他部分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使这生效，我们显然必须使用C++20编译器，并设置选项以访问实验性模块。请注意，所有“实验性”的内容都会随时间而变化。</p><h2 id="a-3-使用头文件" tabindex="-1"><a class="header-anchor" href="#a-3-使用头文件"><span>A.3 使用头文件</span></a></h2><p>如果实现尚不支持模块或尚未提供 <strong>std模块</strong> 或等效物，我们可以退而使用传统的头文件。它们是标准的且普遍可用的。但是，为了使示例工作，我们需要确定需要哪些头文件并使用 <strong>#include</strong> 包含它们。第9章可以在这里提供帮助，我们可以在[cppreference]上查找我们想要使用的功能的名称，以查看它是哪个头文件的一部分。如果这变得很繁琐，我们可以将经常使用的头文件收集到一个 <strong>std.h</strong> 头文件中：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// std.h  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;vector&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;list&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;algorithms&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;std.h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里的问题是，包含如此多的头文件可能会导致编译速度非常慢[Stroustrup,2021b]。</p><h2 id="a-4-创建你自己的std模块" tabindex="-1"><a class="header-anchor" href="#a-4-创建你自己的std模块"><span>A.4 创建你自己的std模块</span></a></h2><p>这是最不吸引人的选择，因为它可能是最费力的，但一旦有人完成了，它就可以被共享：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;vector&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;list&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;algorithms&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> istream;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ostream;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> iostream;  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一个捷径：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;iostream&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vector&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;list&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;memory&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;algorithms&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;iostream&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>导入一个 <strong>头文件单元</strong> 是模块和头文件之间的中间方案。它取一个头文件并将其变成类似模块的东西，但它也可以像 <strong>#include</strong> 一样将名称注入到全局命名空间中，并且它会泄露宏。</p><p>这种方法的编译速度不如 <strong>#include</strong> 慢，但也不如正确构造的命名模块快。</p><h2 id="a-5-建议" tabindex="-1"><a class="header-anchor" href="#a-5-建议"><span>A.5 建议</span></a></h2><ol><li>首选实现提供的模块；见§A.2。</li><li>使用模块；见§A.3。</li><li>相比头文件单元，更倾向使用命名模块；见§A.4。</li><li>要使用C标准中的宏和全局名称，请导入 <strong>std.compat</strong> ；见§A.1。</li><li>避免使用宏；见§A.1。 [CG: ES.30] [CG: ES.31]。</li></ol>`,29)]))}const r=s(l,[["render",e],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/cpp/chapter20/","title":"第20章 std模块","lang":"zh-CN","frontmatter":{"permalink":"/cpp/chapter20/","description":"第20章 std模块 引言 使用你的实现所提供的功能 使用头文件 创建你自己的std模块 建议 A.1 引言 在撰写本文时，遗憾的是， std模块 [Stroustrup,2021b]尚未成为标准的一部分。 我有合理的希望，它将成为C++23的一部分。本附录提供了一些关于当前如何管理的想法。 std模块 的目的是通过单一的 import std; 语句...","head":[["meta",{"property":"og:url","content":"https://blog.nfzwy.com/cpp/chapter20/"}],["meta",{"property":"og:site_name","content":"南风文档"}],["meta",{"property":"og:title","content":"第20章 std模块"}],["meta",{"property":"og:description","content":"第20章 std模块 引言 使用你的实现所提供的功能 使用头文件 创建你自己的std模块 建议 A.1 引言 在撰写本文时，遗憾的是， std模块 [Stroustrup,2021b]尚未成为标准的一部分。 我有合理的希望，它将成为C++23的一部分。本附录提供了一些关于当前如何管理的想法。 std模块 的目的是通过单一的 import std; 语句..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-27T10:32:17.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-27T10:32:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第20章 std模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-27T10:32:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"南风\\",\\"url\\":\\"https://blog.nfwzy.com\\"}]}"]]},"headers":[{"level":2,"title":"A.1 引言","slug":"a-1-引言","link":"#a-1-引言","children":[]},{"level":2,"title":"A.2 使用你的实现所提供的功能","slug":"a-2-使用你的实现所提供的功能","link":"#a-2-使用你的实现所提供的功能","children":[]},{"level":2,"title":"A.3 使用头文件","slug":"a-3-使用头文件","link":"#a-3-使用头文件","children":[]},{"level":2,"title":"A.4 创建你自己的std模块","slug":"a-4-创建你自己的std模块","link":"#a-4-创建你自己的std模块","children":[]},{"level":2,"title":"A.5 建议","slug":"a-5-建议","link":"#a-5-建议","children":[]}],"git":{"createdTime":1729937676000,"updatedTime":1730025137000,"contributors":[{"name":"nfzwy","email":"nfzwy@南风","commits":2}]},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"a tour of c++/第20章 std模块.md","localizedDate":"2024年10月26日","excerpt":"\\n<ul>\\n<li>引言</li>\\n<li>使用你的实现所提供的功能</li>\\n<li>使用头文件</li>\\n<li>创建你自己的std模块</li>\\n<li>建议</li>\\n</ul>\\n<h2>A.1 引言</h2>\\n<p>在撰写本文时，遗憾的是， <strong>std模块</strong> [Stroustrup,2021b]尚未成为标准的一部分。\\n我有合理的希望，它将成为C++23的一部分。本附录提供了一些关于当前如何管理的想法。</p>\\n<p><strong>std模块</strong> 的目的是通过单一的 <strong>import std;</strong> 语句，简单且低成本地提供标准库的所有组件。我在各个章节中都依赖于此。提到并命名头文件主要是因为它们是传统的且普遍可用的，部分原因是它们反映了标准库（不完善）的历史组织结构。</p>","autoDesc":true}');export{r as comp,d as data};
