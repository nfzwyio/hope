import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,e as h,a as n,f as a,r as e,o as p,b as i,d as l}from"./app-XaG8eQ0f.js";const g={};function d(o,s){const t=e("center");return p(),k("div",null,[s[11]||(s[11]=h(`<h1 id="第14章-ranges" tabindex="-1"><a class="header-anchor" href="#第14章-ranges"><span>第14章 Ranges</span></a></h1><ul><li>简介</li><li>视图</li><li>生成器</li><li>管道</li><li>概念概览 <ul><li>类型概念；</li><li>迭代器概念；</li><li>范围概念</li></ul></li><li>建议</li></ul><h2 id="_14-1-简介" tabindex="-1"><a class="header-anchor" href="#_14-1-简介"><span>14.1 简介</span></a></h2><p>标准库提供了使用概念约束的算法和未约束的算法（为了兼容性）。概念约束版本位于 <strong>ranges</strong> 命名空间的 <strong>&lt;ranges&gt;</strong> 中。自然而然，我更倾向于使用概念的版本。一个 <strong>range</strong> 是对C++98中由{ <strong>begin()</strong> , <strong>end()</strong> }对定义的序列的一般化；它规定了作为元素序列所需具备的条件。</p><p>一个 <strong>range</strong> 可以通过以下方式定义：</p><ul><li>一对{ <strong>begin</strong> , <strong>end</strong> }迭代器</li><li>一对{ <strong>begin</strong> , <strong>n</strong> }，其中 <strong>begin</strong> 是一个迭代器， <strong>n</strong> 是元素数量</li><li>一对{ <strong>begin</strong> , <strong>pred</strong> }，其中 <strong>begin</strong> 是一个迭代器， <strong>pred</strong> 是一个谓词；如果对于迭代器 <strong>p</strong> ， <strong>pred(p)</strong> 为真，则表示我们到达了范围的末尾。这允许我们拥有无限范围以及“即时”生成的范围（§14.3）。</li></ul><p>正是这个范围概念使得我们能够写出 <strong>sort(v)</strong> 而非 <strong>sort(v.begin(),v.end())</strong> ，这是自1994年以来使用STL所需的方式。对于我们自己的算法，也可以类似操作：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">forward_range</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sortable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">iterator_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">R</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> my_sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">R</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 现代、概念约束版本的my_sort</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> my_sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用1994风格的sort</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>范围允许我们更直接地表达大约99%的算法常见用法。除了符号上的优势外，范围还提供了一些优化机会，并消除了诸如 <strong>sort(v1.begin(),v2.end())</strong> 和 <strong>sort(v.end(),v.begin())</strong> 这一类的“愚蠢错误”。是的，这类错误在实际应用中确实出现过。</p><p>自然而然，存在不同种类的范围，对应于不同种类的迭代器。特别是， <strong>input_range</strong> 、 <strong>forward_range</strong> 、 <strong>bidirectional_range</strong> 、 <strong>random_access_range</strong> 和 <strong>contiguous_range</strong> 作为 <strong>概念</strong> 被表示（§14.5）。</p><h2 id="_14-2-视图" tabindex="-1"><a class="header-anchor" href="#_14-2-视图"><span>14.2 视图</span></a></h2><p><strong>视图</strong> （Views）是一种观察范围的方式。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;pch.h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#include</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">iostream</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#include</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ranges</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ranges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_view v{ r, [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; } };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;奇数: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : take_view{ v, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v{ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//奇数: 1 3 5 7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当从 <strong>filter_view</strong> 读取时，我们实际上是从其范围读取。如果读取的值满足谓词条件，则返回该值；否则， <strong>filter_view</strong> 会尝试使用范围中的下一个元素。</p><p>许多范围可能是无限的。此外，我们常常只需要几个值。因此，存在一些视图用于从范围内仅获取少数几个值：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_view v{r, [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; } };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    take_view tv {v, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 最多从v中取出100个元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;奇数: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : tv)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过直接使用 <strong>take_view</strong> 来避免为其命名：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : take_view{v, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <strong>filter_view</strong> 同样可以这样做：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : take_view{ filter_view { r, [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; } }, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种视图嵌套使用的方式可能会有点难以理解，因此还有另一种选择： <strong>管道</strong> （§14.4）。</p><p>标准库提供了许多视图，也称为 <strong>范围适配器</strong> （range adaptors）：</p>`,22)),n(t,null,{default:a(()=>s[0]||(s[0]=[i("strong",null,"标准库视图（范围适配器） <ranges>",-1)])),_:1}),n(t,null,{default:a(()=>s[1]||(s[1]=[i("strong",null,"v",-1),l(" 是一个视图；"),i("strong",null,"r",-1),l(" 是一个范围；"),i("strong",null,"p",-1),l(" 是一个谓词；"),i("strong",null,"n",-1),l(" 是一个整数")])),_:1}),s[12]||(s[12]=h(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>v=all_view{r}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 的所有元素</td></tr><tr><td><strong>v=filter_view{r,p}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中满足 <strong>p</strong> 的元素</td></tr><tr><td><strong>v=transform_view{r,f}</strong></td><td><strong>v</strong> 是对 <strong>r</strong> 中每个元素应用 <strong>f</strong> 后的结果</td></tr><tr><td><strong>v=take_view{r,n}</strong></td><td><strong>v</strong> 是最多包含 <strong>r</strong> 的前 <strong>n</strong> 个元素</td></tr><tr><td><strong>v=take_while_view{r,p}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中直到遇到不满足 <strong>p</strong> 的元素为止的所有元素</td></tr><tr><td><strong>v=drop_view{r,n}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 的第 <strong>n+1</strong> 个元素开始的剩余元素</td></tr><tr><td><strong>v=drop_while_view{r,p}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中第一个不满足 <strong>p</strong> 的元素开始的剩余元素</td></tr><tr><td><strong>v=join_view{r}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 的扁平化版本； <strong>r</strong> 的元素必须是范围</td></tr><tr><td><strong>v=split_view(r,d)</strong></td><td><strong>v</strong> 是根据分隔符 <strong>d</strong> 确定的 <strong>r</strong> 的子范围组成的范围； <strong>d</strong> 可以是元素或范围</td></tr><tr><td><strong>v=common_view(r)</strong></td><td><strong>v</strong> 是以 <strong>(begin:end)</strong> 对描述的 <strong>r</strong></td></tr><tr><td><strong>v=reverse_view{r}</strong></td><td><strong>v</strong> 是反序的 <strong>r</strong> 的元素； <strong>r</strong> 需支持双向访问</td></tr><tr><td><strong>v=views::elements&lt;n&gt;(r)</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中每个 <strong>元组</strong> 元素的第 <strong>n</strong> 个元素组成的范围</td></tr><tr><td><strong>v=keys_view{r}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中 <strong>每对</strong> 元素组成的键的范围</td></tr><tr><td><strong>v=values_view{r}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中 <strong>每对</strong> 元素组成的值的范围</td></tr><tr><td><strong>v=ref_view{r}</strong></td><td><strong>v</strong> 是 <strong>r</strong> 中元素的引用的范围</td></tr></tbody></table><p>视图提供了一个与范围非常相似的接口，因此在大多数情况下，我们可以在使用范围的方式和位置上使用视图。关键的区别在于，视图并不拥有其元素；它不负责删除其底层范围的元素——这是范围的责任。另一方面，视图的生命周期不得超过其范围：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> filter_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v, odd);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // v 将在此处被销毁，先于视图</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图应该是容易复制的，所以我们通过值传递它们。</p><p>我使用了简单的标准类型来保持示例简单，但当然，我们也可以拥有针对我们自定义类型的视图。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Reading</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> location {};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temperature {}; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> humidity {}; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> air_pressure {}; </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> average_temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Reading</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">readings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">readings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> No_readings{}; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp : views::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">elements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(readings))</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 只查看温度部分</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> readings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-3-生成器" tabindex="-1"><a class="header-anchor" href="#_14-3-生成器"><span>14.3 生成器</span></a></h2><p>很多时候，范围需要即时生成。标准库为此提供了一些简单的 <strong>生成器</strong> （也称为 <strong>工厂</strong> ）：</p>`,8)),n(t,null,{default:a(()=>s[2]||(s[2]=[i("strong",null,"范围工厂 <ranges >",-1)])),_:1}),n(t,null,{default:a(()=>s[3]||(s[3]=[i("strong",null,"v",-1),l(" 是一个视图；"),i("strong",null,"x",-1),l(" 是元素类型 "),i("strong",null,"T",-1),l(" 的实例；"),i("strong",null,"is",-1),l(" 是一个输入流"),i("strong",null,"istream",-1)])),_:1}),s[13]||(s[13]=h(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>v=empty_view&lt;T&gt;{}</strong></td><td><strong>v</strong> 是一个空范围，若存在元素则类型为 <strong>T</strong> （即使实际上为空）</td></tr><tr><td><strong>v=single_view{x}</strong></td><td><strong>v</strong> 是一个只包含单个元素 <strong>x</strong> 的范围</td></tr><tr><td><strong>v=iota_view{x}</strong></td><td><strong>v</strong> 是一个无限范围，元素为 <strong>x, x+1, x+2</strong> , <strong>...</strong> ，递增通过 <strong>++</strong> 实现</td></tr><tr><td><strong>v=iota_view{x,y}</strong></td><td><strong>v</strong> 是一个含有 <strong>n</strong> 个元素的范围： <strong>x, x+1, ..., y-1</strong> 递增同样通过 <strong>++</strong> 实现</td></tr><tr><td><strong>v=istream_view&lt;T&gt;{is}</strong></td><td><strong>v</strong> 是从输入流 <strong>is</strong> 通过 <strong>&gt;&gt;</strong> 操作读取 <strong>T</strong> 类型的元素形成的范围</td></tr></tbody></table><p><strong>iota_view</strong> 对于生成简单序列非常有用。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iota_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">52</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 42 43 44 45 46 47 48 49 50 51</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>istream_view</strong> 提供给我们一种简便的方式，在范围 <strong>for</strong> 循环中使用输入流（ <strong>istream</strong> ）：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">istream_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">complex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;(cin))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他视图一样， <strong>istream_view</strong> 可以与其他视图组合：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cplx </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> istream_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">complex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;(cin);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transform_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cplx, [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> z</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">z;}))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果输入是 <strong>1 2 3</strong> ，则输出为 <strong>1 4 9</strong> 。</p><h2 id="_14-4-管道" tabindex="-1"><a class="header-anchor" href="#_14-4-管道"><span>14.4 管道</span></a></h2><p>对于每个标准库视图（§14.2），标准库都提供了一个生成过滤器的函数；也就是说，一个可以用作过滤器运算符 <strong>|</strong> 参数的对象。例如， <strong>filter()</strong> 会生成一个 <strong>filter_view</strong> 。这允许我们以序列的形式组合过滤器，而不是将它们作为一组嵌套的函数调用呈现。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> odd </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; };  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : r </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> views::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(odd) </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> views::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入范围 <strong>2 4 6 8 20</strong> 会产生输出 <strong>1 2 3</strong> 。</p><p>管道风格（使用Unix管道运算符 <strong>|</strong> )被广泛认为比嵌套函数调用更易读。管道从左到右工作；即 <strong>f|g</strong> 表示将 <strong>f</strong> 的结果传递给 <strong>g</strong> ，所以 <strong>r|f|g</strong> 意味着 <strong>(g_filter(f_filter(r)))</strong> 。初始的 <strong>r</strong> 必须是一个范围或生成器。</p><p>这些过滤器函数位于命名空间 <strong>ranges::views</strong> 中：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : r </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> views::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; } ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> views::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) )  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我发现显式使用 <strong>views::</strong> 可以使代码更易读，但我们可以进一步缩短代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> views</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> odd </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; };  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : r </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(odd) </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) )  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图和管道的实现涉及一些相当复杂的模板元编程，因此如果你关心性能，请确保测量你的实现是否满足你的需求。如果没有，总是有一个传统的解决方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">forward_range</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : r)  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，这里的逻辑被掩盖了。</p><h2 id="_14-5-概念概述" tabindex="-1"><a class="header-anchor" href="#_14-5-概念概述"><span>14.5 概念概述</span></a></h2><p>标准库提供了许多有用的概念：</p><p>• 定义类型属性的概念（§14.5.1）</p><p>• 定义迭代器的概念（§14.5.2）</p><p>• 定义范围的概念（§14.5.3）</p><h3 id="_14-5-1-类型概念" tabindex="-1"><a class="header-anchor" href="#_14-5-1-类型概念"><span>14.5.1 类型概念</span></a></h3><p>与类型属性以及类型之间关系相关的概念反映了类型的多样性。这些概念有助于简化大多数模板。</p>`,27)),n(t,null,{default:a(()=>s[4]||(s[4]=[i("strong",null,"核心语言概念 <concepts >",-1)])),_:1}),n(t,null,{default:a(()=>s[5]||(s[5]=[i("strong",null,"T",-1),l(" 和 "),i("strong",null,"U",-1),l(" 是类型。")])),_:1}),s[14]||(s[14]=h(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>same_as&lt;T,U&gt;</strong></td><td><strong>T</strong> 与 <strong>U</strong> 相同类型</td></tr><tr><td><strong>derived_from&lt;T,U&gt;</strong></td><td><strong>T</strong> 是从 <strong>U</strong> 派生的类型</td></tr><tr><td><strong>convertible_to&lt;T,U&gt;</strong></td><td><strong>T</strong> 类型的对象可以转换为 <strong>U</strong> 类型</td></tr><tr><td><strong>common_reference_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 和 <strong>U</strong> 有共同的引用类型</td></tr><tr><td><strong>common_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 和 <strong>U</strong> 有共同的类型</td></tr><tr><td><strong>integral&lt;T&gt;</strong></td><td><strong>T</strong> 是整数类型</td></tr><tr><td><strong>signed_integral&lt;T&gt;</strong></td><td><strong>T</strong> 是有符号整数类型</td></tr><tr><td><strong>unsigned_integral&lt;T&gt;</strong></td><td><strong>T</strong> 是无符号整数类型</td></tr><tr><td><strong>floating_point&lt;T&gt;</strong></td><td><strong>T</strong> 是浮点类型</td></tr><tr><td><strong>assignable_from&lt;T,U&gt;</strong></td><td><strong>U</strong> 类型的对象可以赋值给 <strong>T</strong> 类型对象</td></tr><tr><td><strong>swappable_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 类型的对象可以与 <strong>U</strong> 类型的对象交换</td></tr><tr><td><strong>swappable&lt;T&gt;</strong></td><td>特化形式 <strong>swappable_with&lt;T,T&gt;</strong> ，表示 <strong>T</strong> 类型的对象之间可交换</td></tr></tbody></table><p>许多算法应该能够与相关类型的组合一起工作，例如，包含 <strong>int</strong> 和 <strong>double</strong> 的混合表达式。我们使用 <strong>common_with</strong> 来表示这种混合是否在数学上是合理的。如果 <strong>common_with&lt;X,Y&gt;</strong> 为真，我们可以使用 <strong>common_type_t&lt;X,Y&gt;</strong> 来比较 <strong>X</strong> 和 <strong>Y</strong> ，首先将它们都转换为 <strong>common_type_t&lt;X,Y&gt;</strong> 。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">common_type_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> some_fct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">common_type_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> some_other_fct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (s1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2) {  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了为一对类型指定一个公共类型，我们在 <strong>common</strong> 的定义中特化 <strong>common_type_t</strong> 。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> common_type_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Bigint, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Bigint;  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对于Bigint的合适定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>幸运的是，除非我们想对库还没有合适定义的类型混合进行操作，否则我们不需要定义 <strong>common_type_t</strong> 的特化。</p><p>与比较相关的概念在很大程度上受到了[Stepanov,2009]的影响。</p>`,7)),n(t,null,{default:a(()=>s[6]||(s[6]=[i("strong",null,"比较概念 <concepts >",-1)])),_:1}),s[15]||(s[15]=h(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>equality_comparable_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 和 <strong>U</strong> 类型的对象可以用 <strong>==</strong> 比较是否相等</td></tr><tr><td><strong>equality_comparable&lt;T&gt;</strong></td><td><strong>equality_comparablewith&lt;T,T&gt;</strong></td></tr><tr><td><strong>totally_ordered_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 和 <strong>U</strong> 类型的对象可以用 <strong>&lt;</strong> , <strong>&lt;=</strong> , <strong>&gt;</strong> , 和 <strong>&gt;=</strong> 比较，形成一个全序关系</td></tr><tr><td><strong>totally_ordered&lt;T&gt;</strong></td><td><strong>strict_totally_ordered_with&lt;T,T&gt;</strong></td></tr><tr><td><strong>three_way_comparable_with&lt;T,U&gt;</strong></td><td><strong>T</strong> 和 <strong>U</strong> 类型的对象可以用 <strong>&lt;=&gt;</strong> （太空船运算符）比较，得出一致的结果</td></tr><tr><td><strong>three_way_comparable&lt;T&gt;</strong></td><td><strong>three_way_comparable_with&lt;T,T&gt;</strong></td></tr></tbody></table><p>同时使用 <strong>equality_comparable_with</strong> 和 <strong>equality_comparable</strong> 展示了（到目前为止）一个被忽视的重载概念的机会。</p><p>奇怪的是，没有标准的 <strong>boolean</strong> 概念。我经常需要它，所以这里提供一个版本：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">concept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Boolean </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(B x, B y) {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y) };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y) }; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x }; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y) }; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编写模板时，我们经常需要对类型进行分类。</p>`,5)),n(t,null,{default:a(()=>s[7]||(s[7]=[i("strong",null,"对象概念 <concepts >",-1)])),_:1}),s[16]||(s[16]=h("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>destructible&lt;T&gt;</strong></td><td><strong>T</strong> 类型的对象可以被销毁，并且可以使用 <strong>&amp;</strong> 对其取址</td></tr><tr><td><strong>constructible_from&lt;T,Args&gt;</strong></td><td>可以使用类型为 <strong>Args</strong> 的参数列表构造 <strong>T</strong> 类型的对象</td></tr><tr><td><strong>default_initializable&lt;T&gt;</strong></td><td><strong>T</strong> 类型支持默认构造</td></tr><tr><td><strong>move_constructible&lt;T&gt;</strong></td><td><strong>T</strong> 类型支持移动构造</td></tr><tr><td><strong>copy_constructible&lt;T&gt;</strong></td><td><strong>T</strong> 类型支持拷贝构造</td></tr><tr><td><strong>movable&lt;T&gt;</strong></td><td><strong>move_constructible&lt;T&gt;</strong> ， <strong>assignable&lt;T&amp;, T&gt;</strong> ，和 <strong>swappable&lt;T&gt;</strong></td></tr><tr><td><strong>copyable&lt;T&gt;</strong></td><td><strong>copy_constructable&lt;T&gt;</strong> , <strong>moveable&lt;T&gt;</strong> ，和 <strong>assignable&lt;T, const T&amp;&gt;</strong></td></tr><tr><td><strong>semiregular&lt;T&gt;</strong></td><td><strong>copyable&lt;T&gt;</strong> 和 <strong>default_initializable&lt;T&gt;</strong></td></tr><tr><td><strong>regular&lt;T&gt;</strong></td><td><strong>semiregular&lt;T&gt;</strong> 和 <strong>equality_comparable&lt;T&gt;</strong></td></tr></tbody></table><p>类型的理想是 <strong>regular</strong> 。 <strong>regular</strong> 类型大致像 <strong>int</strong> 一样工作，并简化了我们关于如何使用类型的许多思考（(§8.2）。类缺少默认的 <strong>==</strong> 操作符意味着，尽管大多数类都可以也应该是正则（ <strong>regular</strong> ）的，但它们一开始都被视为半正则（ <strong>semiregular</strong> ）的。</p><p>每当我们将一个操作作为约束模板参数传递时，我们需要指定如何调用它，有时还需要指定我们对它们语义的假设。</p>",3)),n(t,null,{default:a(()=>s[8]||(s[8]=[i("strong",null,"可调用概念<concepts >",-1)])),_:1}),s[17]||(s[17]=h('<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>invocable&lt;F,Args&gt;</strong></td><td>函数对象 <strong>F</strong> 可以使用类型为 <strong>Args</strong> 的参数列表来调用</td></tr><tr><td><strong>regular_invocable&lt;F,Args&gt;</strong></td><td><strong>invocable&lt;F,Args&gt;</strong> 且调用结果保持等价性</td></tr><tr><td><strong>predicate&lt;F,Args&gt;</strong></td><td><strong>regular_invocable&lt;F,Args&gt;</strong> 且返回类型为 <strong>bool</strong></td></tr><tr><td><strong>relation&lt;F,T,U&gt;</strong></td><td><strong>predicate&lt;F,T,U&gt;</strong></td></tr><tr><td><strong>equivalence_relation&lt;F,T,U&gt;</strong></td><td><strong>relation&lt;F,T,U&gt;</strong> 提供等价关系</td></tr><tr><td><strong>strict_weak_order&lt;F,T,U&gt;</strong></td><td><strong>relation&lt;F,T,U&gt;</strong> 提供严格的弱排序</td></tr></tbody></table><p>函数 <strong>f()</strong> 是 <strong>保等性</strong> ( equality preserving)的，如果 <strong>x==y</strong> 则意味着 <strong>f(x)==f(y)</strong> 。一个 <strong>invocable</strong> 和一个 <strong>regular_invocable</strong> 仅在语义上有所不同。我们（目前）无法在代码中表示这种差异，因此这些名称只是表达了我们的意图。</p><p>类似地， <strong>关系</strong> 和 <strong>等价关系</strong> （equivalence_relation）也仅在语义上有所不同。等价关系是反身的、对称的和传递的。</p><p><strong>关系</strong> 和 <strong>严格弱序</strong> （strict_weak_order）也仅在语义上有所不同。严格弱序是标准库通常对比较（如&lt;）所假设的。</p><h3 id="_14-5-2-迭代器概念" tabindex="-1"><a class="header-anchor" href="#_14-5-2-迭代器概念"><span>14.5.2 迭代器概念</span></a></h3><p>传统的标准算法通过迭代器访问其数据，因此我们需要概念来对迭代器类型的属性进行分类。</p>',6)),n(t,null,{default:a(()=>s[9]||(s[9]=[i("strong",null,"迭代器概念<concepts >",-1)])),_:1}),s[18]||(s[18]=h(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>input_or_output_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个可递增（ <strong>++</strong> ）和可解引用（*****）的迭代器</td></tr><tr><td><strong>sentinel_for&lt;S,I&gt;</strong></td><td><strong>S</strong> 是一个 <strong>Iterator</strong> 类型的哨兵；即， <strong>S</strong> 是对 <strong>I</strong> 值类型的谓词</td></tr><tr><td><strong>sized_sentinel_for&lt;S,I&gt;</strong></td><td><strong>S</strong> 是一个哨兵，其中 <strong>-</strong> 运算符可以应用于 <strong>I</strong></td></tr><tr><td><strong>input_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个输入迭代器；只能使用*****进行读取</td></tr><tr><td><strong>output_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个输出迭代器；只能使用*****进行写入</td></tr><tr><td><strong>forward_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个前向迭代器，支持 <strong>multi-pass</strong> 和 <strong>==</strong></td></tr><tr><td><strong>bidirectional_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个支持 <strong>--</strong> 的 <strong>forward_iterator&lt;I&gt;</strong></td></tr><tr><td><strong>random_access_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是一个支持 <strong>+</strong> , <strong>-</strong> , <strong>+=</strong> , <strong>-=</strong> 以及 <strong>[]</strong> 操作的 <strong>bidirectional_iterator&lt;I&gt;</strong></td></tr><tr><td><strong>contiguous_iterator&lt;I&gt;</strong></td><td><strong>I</strong> 是用于访问连续内存中元素的 <strong>random_access_iterator&lt;I&gt;</strong></td></tr><tr><td><strong>permutable&lt;I&gt;</strong></td><td>支持移动和交换的 <strong>forward_iterator&lt;I&gt;</strong></td></tr><tr><td><strong>mergeable&lt;I1,I2,R,O&gt;</strong></td><td>能否使用 <strong>relation&lt;R&gt;</strong> 合并由I1和I2定义的已排序序列到O中？</td></tr><tr><td><strong>sortable&lt;I&gt;</strong></td><td>能否使用 <strong>less</strong> 对由I定义的序列进行排序？</td></tr><tr><td><strong>sortable&lt;I,R&gt;</strong></td><td>能否使用 <strong>relation&lt;R&gt;</strong> 对由I定义的序列进行排序？</td></tr></tbody></table><p><strong>mergeable</strong> 和 <strong>sortable</strong> 相对于它们在C++20中的定义有所简化。</p><p>不同的迭代器（类别）用于为给定的参数集选择最佳算法；见§8.2.2和§16.4.1。关于 <strong>input_iterator</strong> 的示例，见§13.3.1。</p><p>哨兵（sentinel）的基本思想是，我们可以从迭代器开始遍历一个范围，直到某个元素的谓词变为真。这样，迭代器 <strong>p</strong> 和哨兵 <strong>s</strong> 就定义了一个范围**[p:s(*p))**。例如，我们可以为遍历C风格字符串的哨兵定义一个谓词，使用指针作为迭代器。不幸的是，这需要一些样板代码，因为我们的目的是将谓词呈现为一种不能与普通迭代器混淆的东西，但你可以将其与用于遍历范围的迭代器进行比较：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ee) { }  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 概念sentinel_for要求有一个默认构造函数  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    friend</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> operator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">==(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Iter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Sentinel</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    friend</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> operator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!=(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Iter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Sentinel</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s); }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    iter_value_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> end;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 哨兵值  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>friend</strong> 声明符允许我们在类的范围内定义用于比较迭代器和哨兵的 <strong>==</strong> 和 <strong>!=</strong> 二元函数。</p><p>我们可以检查这个 <strong>Sentinel</strong> 是否满足 *<em>const char*</em> *的 <strong>sentinel_for</strong> 的要求：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static_assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sentinel_for</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Sentinel</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, const char*&gt;);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 检查C风格字符串的Sentinel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最后，我们可以编写一个相当奇特的“Hello, World!”程序版本：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> aa[] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Bye for now</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ranges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">for_each</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(aa, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sentinel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x; });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>是的，这真的写入了 <strong>Hello, World!</strong> ，后面没有换行符。</p><h3 id="_14-5-3-范围概念" tabindex="-1"><a class="header-anchor" href="#_14-5-3-范围概念"><span>14.5.3 范围概念</span></a></h3><p>范围概念定义了范围的属性。</p>`,13)),n(t,null,{default:a(()=>s[10]||(s[10]=[i("strong",null,"范围概念<concepts >",-1)])),_:1}),s[19]||(s[19]=h('<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，拥有开始迭代器和哨兵</td></tr><tr><td><strong>sized_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，可以在常数时间内知道其大小</td></tr><tr><td><strong>view&lt;R&gt;</strong></td><td><strong>R</strong> 是一个视图，支持常数时间的复制、移动和赋值操作</td></tr><tr><td><strong>common_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，有相同的迭代器类型和哨兵类型</td></tr><tr><td><strong>input_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>input_iterator</strong></td></tr><tr><td><strong>output_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>output_iterator</strong></td></tr><tr><td><strong>forward_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>forward_iterator</strong></td></tr><tr><td><strong>bidirectional_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>bidirectional_iterator</strong></td></tr><tr><td><strong>random_access_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>random_access_iterator</strong></td></tr><tr><td><strong>contiguous_range&lt;R&gt;</strong></td><td><strong>R</strong> 是一个范围，其迭代器类型满足 <strong>contiguous_iterator</strong></td></tr></tbody></table><p><strong>&lt;ranges&gt;</strong> 中还有一些其他的概念，但上面这些是一个很好的开始。这些概念的主要用途是根据其输入的类型属性来启用实现的重载（§8.2.2）。</p><h2 id="_14-6-建议" tabindex="-1"><a class="header-anchor" href="#_14-6-建议"><span>14.6 建议</span></a></h2><ol><li>当使用迭代器对风格变得繁琐时，尝试使用范围算法；§13.1；§14.1。</li><li>使用范围算法时，记得显式地引入其名称；§13.3.1。</li><li>对范围的操作可以通过 <strong>视图</strong> 、 <strong>生成器</strong> 和 <strong>过滤器</strong> 来表达为管道；§14.2，§14.3，§14.4。</li><li>要以谓词结束一个范围，你需要定义一个哨兵；§14.5。</li><li>使用 <strong>static_assert</strong> ，我们可以检查一个特定类型是否满足某个概念的要求；§8.2.4。</li><li>如果你需要一个范围算法而标准中没有，可以自己编写；§13.6。</li><li>类型的理想是 <strong>regular</strong> ；§14.5。</li><li>在适用的情况下，首选标准库中的概念；§14.5。</li><li>当请求并行执行时，务必避免数据竞争（§18.2）和死锁（§18.3）；§13.6。</li></ol>',4))])}const y=r(g,[["render",d],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/cpp/chapter14/","title":"第14章 Ranges","lang":"zh-CN","frontmatter":{"permalink":"/cpp/chapter14/"},"headers":[{"level":2,"title":"14.1 简介","slug":"_14-1-简介","link":"#_14-1-简介","children":[]},{"level":2,"title":"14.2 视图","slug":"_14-2-视图","link":"#_14-2-视图","children":[]},{"level":2,"title":"14.3 生成器","slug":"_14-3-生成器","link":"#_14-3-生成器","children":[]},{"level":2,"title":"14.4 管道","slug":"_14-4-管道","link":"#_14-4-管道","children":[]},{"level":2,"title":"14.5 概念概述","slug":"_14-5-概念概述","link":"#_14-5-概念概述","children":[{"level":3,"title":"14.5.1 类型概念","slug":"_14-5-1-类型概念","link":"#_14-5-1-类型概念","children":[]},{"level":3,"title":"14.5.2 迭代器概念","slug":"_14-5-2-迭代器概念","link":"#_14-5-2-迭代器概念","children":[]},{"level":3,"title":"14.5.3 范围概念","slug":"_14-5-3-范围概念","link":"#_14-5-3-范围概念","children":[]}]},{"level":2,"title":"14.6 建议","slug":"_14-6-建议","link":"#_14-6-建议","children":[]}],"git":{"createdTime":1729937676000,"updatedTime":1730025137000,"contributors":[{"name":"nfzwy","email":"nfzwy@南风","commits":2}]},"readingTime":{"minutes":14.86,"words":4458},"filePathRelative":"a tour of c++/第14章 Range.md","localizedDate":"2024年10月26日","excerpt":"\\n<ul>\\n<li>简介</li>\\n<li>视图</li>\\n<li>生成器</li>\\n<li>管道</li>\\n<li>概念概览\\n<ul>\\n<li>类型概念；</li>\\n<li>迭代器概念；</li>\\n<li>范围概念</li>\\n</ul>\\n</li>\\n<li>建议</li>\\n</ul>\\n<h2>14.1 简介</h2>\\n<p>标准库提供了使用概念约束的算法和未约束的算法（为了兼容性）。概念约束版本位于 <strong>ranges</strong> 命名空间的 <strong>&lt;ranges&gt;</strong> 中。自然而然，我更倾向于使用概念的版本。一个 <strong>range</strong> 是对C++98中由{ <strong>begin()</strong> , <strong>end()</strong> }对定义的序列的一般化；它规定了作为元素序列所需具备的条件。</p>"}');export{y as comp,c as data};
