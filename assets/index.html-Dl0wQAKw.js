import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as i,a as l,f as h,r as k,o as e,b as p}from"./app-tSwHPRi-.js";const r="/cpp_img/1001.png",d="/cpp_img/1002.png",g={};function A(o,s){const t=k("center");return e(),n("div",null,[s[1]||(s[1]=i(`<h1 id="第10章-字符串和正则表达式" tabindex="-1"><a class="header-anchor" href="#第10章-字符串和正则表达式"><span>第10章 字符串和正则表达式</span></a></h1><p>优先选择标准而非非主流——Strunk &amp; White</p><ul><li><p>简介</p></li><li><p>字符串</p><p>​ <strong>string</strong> 实现</p></li><li><p>字符串视图</p></li><li><p>正则表达式</p><p>​ 搜索；</p><p>​ 正则表达式表示法；</p><p>​ 迭代器</p></li><li><p>建议</p></li></ul><h2 id="_10-1-简介" tabindex="-1"><a class="header-anchor" href="#_10-1-简介"><span>10.1 简介</span></a></h2><p>文本操作是大多数程序的重要组成部分。C++标准库提供了一种 <strong>string</strong> 类型，以避免大多数用户通过指针进行C风格的字符数组操作。 <strong>string_view</strong> 类型使我们能够以任意方式操纵字符序列（例如，在 <strong>std::string</strong> 或 <strong>char[]</strong> 中）。此外，还提供了正则表达式匹配功能，以帮助在文本中查找模式。正则表达式以一种与大多数现代语言中常见的形式提供。 <strong>string</strong> 和 <strong>regex</strong> 对象都可以使用多种字符类型（例如，Unicode）。</p><h2 id="_10-2-字符串" tabindex="-1"><a class="header-anchor" href="#_10-2-字符串"><span>10.2 字符串</span></a></h2><p>标准库提供了一种 <strong>string</strong> 类型，以补充字符串字面量（§1.2.1）； <strong>string</strong> 是一个 <strong>常规</strong> 类型（§8.2, §14.5），用于拥有和操作各种字符类型的字符序列。 <strong>string</strong> 类型提供了多种有用的字符串操作，比如连接。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> domain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> domain;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> addr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dmr&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bell-labs.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里， <strong>addr</strong> 被初始化为字符序列 <strong>dmr@bell-labs.com</strong> 。 <strong>字符串</strong> 的“加法”意味着连接。你可以将 <strong>字符串</strong> 、字符串字面量、C风格的字符串或字符连接到字符串上。标准字符串具有移动构造函数，因此即使返回长字符串，按值返回也是高效的（§6.2.2）。</p><p>在许多应用中，最常见的连接形式是在字符串末尾添加内容。这直接由 <strong>+=</strong> 操作支持。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> m2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    s1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在末尾追加换行符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    s2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 在末尾追加换行符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向字符串末尾添加内容的两种方式在语义上是等价的，但我更倾向于后者，因为它更明确地表达了它的功能，更简洁，可能也更高效。</p><p><strong>字符串</strong> 是可变的。除了 <strong>=</strong> 和 <strong>+=</strong> 之外，还支持下标访问（使用 <strong>[]</strong> ）和子串操作。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Niels Stroustrup&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> m3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// s = &quot;Stroustrup&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;nicholas&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// name 变为 &quot;nicholas Stroustrup&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toupper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//  name 最终变为 &quot;Nicholas Stroustrup&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>substr()</strong> 操作返回一个 <strong>字符串</strong> ，它是根据其参数指示的子串的 <strong>副本</strong> 。第一个参数是字符串中的 <strong>索引</strong> （一个位置），第二个参数是所需子串的 <strong>长度</strong> 。由于索引从 <strong>6</strong> 开始， <strong>s</strong> 获取的值为 <strong>Stroustrup</strong> 。</p><p><strong>replace()</strong> 操作用一个值替换子串。在这个例子中，从0开始长度为5的子串是 <strong>Niels</strong> ，它被替换成 <strong>nicholas</strong> 。最后，我将首字符替换为其大写形式。因此， <strong>name</strong> 的最终值为 <strong>Nicholas Stroustrup</strong> 。请注意，替换字符串的大小不必与被替换的子串相同。</p><p>众多有用的字符串操作中还包括赋值（使用 <strong>=</strong> ）、下标访问（使用 <strong>[]</strong> 或 <strong>at()</strong> ，类似于 <strong>vector</strong> ；§12.2.2）、比较（使用 <strong>==</strong> 和 <strong>!=</strong> ）、词典序排序（使用 <strong>&lt;</strong> , <strong>&lt;=</strong> , <strong>&gt;</strong> 和 <strong>&gt;=</strong> ）、迭代（使用迭代器、 <strong>begin()</strong> 和 <strong>end()</strong> ，类似于 <strong>vector</strong> ；§13.2）、输入（§11.3）以及流输出（§11.7.3）。</p><p>自然地，字符串可以相互比较，也可以与C风格的字符串（§1.7.1）和字符串字面量进行比较。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string incantation;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> respond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> answer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (answer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> incantation) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ... 执行魔法 ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (answer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要C风格的字符串（一个以零结尾的 <strong>char</strong> 数组），字符串可以通过 <strong>c_str()</strong> 和 <strong>data()</strong> 提供对其包含字符的只读访问。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;For people who like printf: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;For people who like streams: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串字面量本质上是一个 <strong>const char</strong>* 。要获取类型为 <strong>std::string</strong> 的字面量，请使用 <strong>s</strong> 后缀。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cat </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Cat&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 一个std::string</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dog </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Dog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 一个C风格字符串：一个const char*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用 <strong>s</strong> 后缀，你需要使用命名空间 <strong>std::literals::string_literals</strong> （§6.6）。</p><h3 id="_10-2-1-字符串实现" tabindex="-1"><a class="header-anchor" href="#_10-2-1-字符串实现"><span>10.2.1 字符串实现</span></a></h3><p>实现一个字符串类是一项受欢迎且有用的练习。然而，对于通用目的使用，我们精心制作的东西很少在便利性或性能上与标准 <strong>字符串</strong> 相匹敌。如今，字符串通常使用 <strong>短字符串优化</strong> 来实现。也就是说，较短的 <strong>字符串</strong> 值被保留在字符串对象本身中，只有较长的字符串才被放置在自由存储区上。考虑以下示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1 {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Annemarie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 短字符串</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2 {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Annemarie Stroustrup&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 长字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>内存布局将大致如下所示：</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当 <strong>字符串</strong> 的值从短字符串变为长字符串（反之亦然）时，其表示会相应地调整。一个“短”字符串可以有多少个字符？这是实现定义的，大约14个字符。字符串的实际性能可能严重依赖于运行时环境。特别是，在多线程实现中，内存分配可能会相对昂贵。同时，当使用大量长度不一的字符串时，可能导致内存碎片化。这些都是短字符串优化变得普遍的主要原因。</p><p>为了处理多种字符集， <strong>string</strong> 实际上是一个通用模板 <strong>basic_string</strong> 的别名，其字符类型为 <strong>char</strong> ：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> basic_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 包含Char字符的字符串 ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> basic_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以定义任意字符类型的字符串。例如，假设我们有一个中文字符类型 <strong>Cchar</strong> ，我们可以这样写：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cstring</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> basic_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Cchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在我们可以在 <strong>Cstring</strong> 上执行所有常规的字符串操作， <strong>Cstring</strong> 是一个包含中文字符的字符串。</p><h2 id="_10-3-字符串视图" tabindex="-1"><a class="header-anchor" href="#_10-3-字符串视图"><span>10.3 字符串视图</span></a></h2><p>字符序列最常见的用途是将其传递给某个函数进行读取。这可以通过按值传递 <strong>字符串</strong> 、字符串的引用或C风格字符串来实现。在许多系统中，还有其他的选择，比如标准未提供的字符串类型。在所有这些情况下，当我们想要传递子字符串时，会涉及到额外的复杂性。为了解决这个问题，标准库提供了 <strong>string_view</strong> ； <strong>string_view</strong> 实质上是一个（指针，长度）对，表示一个字符序列：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>string_view</strong> 提供了对连续字符序列的访问。这些字符可以以多种方式存储，包括在 <strong>string</strong> 中和C风格的字符串中。 <strong>string_view</strong> 类似于指针或引用，因为它并不拥有它指向的字符。在这方面，它类似于 <strong>STL</strong> 的迭代器对（§13.3）。</p><p>考虑一个简单的函数，用于拼接两个字符串：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string_view</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sv1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string_view</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sv2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string res {sv1};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 从sv1初始化</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sv2;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 追加sv2并返回</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以这样调用这个 <strong>cat()</strong> 函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string king </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Harold&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(king, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;William&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// HaroldWilliam: string和const char*</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(king, king);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// HaroldHarold: string和string</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Edward&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Stephen&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// EdwardStephen: const char*和string_view</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Canute&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, king);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// CanuteHarold</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">king</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Henry&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// HaHenry</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">king</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, {</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">king</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Harold</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于接受 <strong>const string&amp;</strong> 参数的 <strong>compose()</strong> 函数（见第10.2节），这个 <strong>cat()</strong> 函数有三个优点：</p><ul><li>它可用于以多种不同方式管理的字符序列。</li><li>我们可以轻松传递子字符串。</li><li>传递C风格字符串参数时，我们不必创建 <strong>string</strong> 对象。</li></ul><p>注意使用了 <strong>sx</strong> （“string view”）后缀。为此，我们需要使其可见：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::literals::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">string_view_literals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// §6.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为什么需要后缀呢？原因是当我们传入 <strong>&quot;Edward&quot;</strong> 时，需要从 <strong>const char</strong>* 构造一个 <strong>string_view</strong> ，这需要计算字符数量。而对于 <strong>&quot;Stephen&quot;sv</strong> ，长度在编译时就已经计算好了。</p><p><strong>string_view</strong> 定义了一个范围，因此我们可以遍历其字符。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print_lower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string_view</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sv1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ch : sv1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tolower</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ch);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>string_view</strong> 的一个重要限制是，它只是其字符的只读视图。例如，你不能使用 <strong>string_view</strong> 将字符传递给一个会将其参数转换为小写的函数。为此，你可能会考虑使用 <strong>span</strong> （见第15.2.2节）。</p><p>可以将 <strong>string_view</strong> 想象成一种指针；为了使用它，它必须指向某个东西：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string_view</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Once upon a time&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 不好：返回局部变量的指针</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，返回的字符串会在我们使用其字符之前被销毁。</p><p>对 <strong>string_view</strong> 进行越界访问的行为是未定义的。如果你需要保证范围检查，可以使用 <strong>at()</strong> ，它会在尝试越界访问时抛出 <strong>out_of_range</strong> 异常，或者使用 <strong>gsl::string_span</strong> （见第15.2.2节）。</p><h2 id="_10-4-正则表达式" tabindex="-1"><a class="header-anchor" href="#_10-4-正则表达式"><span>10.4 正则表达式</span></a></h2><p>正则表达式是文本处理的强大工具。它们提供了一种简单而紧凑的方法来描述文本中的模式（例如，美国邮政编码，如 <strong>TX 77845</strong> ，或ISO格式的日期，如 <strong>2009-06-07</strong> ），并能高效地找到这些模式。在 <strong>&lt;regex&gt;</strong> 中，标准库以 <strong>std::regex</strong> 类及其支持函数的形式提供了正则表达式的支持。为了展示正则表达式库的风格，让我们定义并打印一个模式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">R&quot;(\\w{2}\\s*\\d{5}(-\\d{4})?)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 美国邮政编码模式: XXddddd-dddd 及其变体</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用过几乎任何语言中的正则表达式的人会对 <em><em>\\w{2}\\s</em>\\d{5}(-\\d{4})?</em>* 感到熟悉。它指定的模式以两个字母 <strong>\\w{2}</strong> 开始，后面可能跟一些空格 <strong>\\s</strong>* ，接着是五位数字 <strong>\\d{5}</strong> ，并且可能再跟随一个破折号和四位数字 <strong>-\\d{4}</strong> 。如果你不熟悉正则表达式，现在可能是一个学习它们的好时机。</p><p>为了表达这个模式，我使用了一个以 <strong>R&quot;(</strong> 开始并以 <strong>)&quot;</strong> 结束的原始字符串字面量。这允许在字符串中直接使用反斜杠和引号。原始字符串特别适合正则表达式，因为它们往往包含大量的反斜杠。如果我使用了传统的字符串，模式定义将会是：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">w{2}</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">s*</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">d{5}(-</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">d{4})?&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 美国邮政编码模式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 <strong>&lt;regex&gt;</strong> 中，标准库提供了正则表达式的支持，包括：</p><p>• <strong>regex_match()</strong> ：将正则表达式与已知大小的字符串进行匹配（§10.4.2）。</p><p>• <strong>regex_search()</strong> ：在（任意长度的）数据流中搜索与正则表达式匹配的字符串（§10.4.1）。</p><p>• <strong>regex_replace()</strong> ：在（任意长度的）数据流中搜索与正则表达式匹配的字符串，并替换它们。</p><p>• <strong>regex_iterator</strong> ：遍历匹配项和子匹配项（§10.4.3）。</p><p>• <strong>regex_token_iterator</strong> ：遍历非匹配项。</p><h3 id="_10-4-1-搜索" tabindex="-1"><a class="header-anchor" href="#_10-4-1-搜索"><span>10.4.1 搜索</span></a></h3><p>使用模式的最简单方法是在数据流中搜索它：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lineno </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (string line; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cin, line); ) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将数据读入line缓冲区</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lineno;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    smatch matches;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 匹配的字符串存放于此</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">regex_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line, matches, pat)) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在line中搜索与pat匹配的内容</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lineno </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>regex_search(line, matches, pat)</strong> 会在 <strong>line</strong> 中搜索任何与存储在 <strong>pat</strong> 中的正则表达式匹配的内容，如果找到匹配项，则将其存储在 <strong>matches</strong> 中。如果没有找到匹配项， <strong>regex_search(line, matches, pat)</strong> 返回false。 <strong>matches</strong> 变量的类型为 <strong>smatch</strong> 。“s”代表“sub”或“string”， <strong>smatch</strong> 是 <strong>string</strong> 类型的子匹配项的向量。第一个元素，即 <strong>matches[0]</strong> ，是完整的匹配结果。 <strong>regex_search()</strong> 的结果是一个匹配项的集合，通常表示为 <strong>smatch</strong> 类型。</p><p>下面是一个使用示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ifstream </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;file.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输入文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 检查文件是否成功打开</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cerr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;无法打开文件</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">R&quot;(\\w{2}\\s*\\d{5}(-\\d{4})?)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 美国邮政编码模式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lineno </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (string line; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in, line); ) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        ++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lineno;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        smatch matches;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 匹配的字符串存放于此</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">regex_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line, matches, pat)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lineno </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 完整的匹配结果</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">matched</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 如果存在子模式并且如果它被匹配到了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 子匹配项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数读取文件，寻找美国邮政编码，如 <strong>TX77845</strong> 和 <strong>DC 20500-0001</strong> 。 <strong>smatch</strong> 类型是正则表达式匹配结果的容器。在这里， <strong>matches[0]</strong> 是整个模式，而 <strong>matches[1]</strong> 是可选的四位数字子模式 <strong>(-\\d{4})?</strong> 。</p><p>换行符 <strong>\\n</strong> 可以作为模式的一部分，所以我们可以在多行模式中进行搜索。显然，如果我们想这样做，就不应该一次读取一行。</p><p>正则表达式的语法和语义被设计成可以编译成状态机以实现高效执行[Cox,2007]。 <strong>regex</strong> 类型在运行时执行这种编译。</p><h3 id="_10-4-2-正则表达式符号" tabindex="-1"><a class="header-anchor" href="#_10-4-2-正则表达式符号"><span>10.4.2 正则表达式符号</span></a></h3><p><strong>regex</strong> 库可以识别几种正则表达式的变体符号表示法。在这里，我使用默认的符号表示法，它是ECMAScript（更通俗地称为JavaScript）所采用的ECMA标准的一种变体。正则表达式的语法基于 <strong>特殊字符</strong> ：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>任意单个字符（“通配符”）</td></tr><tr><td>[</td><td>开始字符类</td></tr><tr><td>]</td><td>结束字符类</td></tr><tr><td>{</td><td>开始计数</td></tr><tr><td>}</td><td>结束计数</td></tr><tr><td>(</td><td>开始分组</td></tr><tr><td>)</td><td>结束分组</td></tr><tr><td>\\</td><td>下一个字符有特殊意义</td></tr><tr><td>∗</td><td>零个或多个（后缀操作）</td></tr><tr><td>+</td><td>一个或多个（后缀操作）</td></tr><tr><td>?</td><td>可选（零个或一个）（后缀操作）</td></tr><tr><td>ˆ</td><td>行首；否定</td></tr><tr><td>$</td><td>行尾</td></tr></tbody></table><p>例如，我们可以这样指定一个模式，该模式以零个或多个&quot; <strong>A</strong> &quot;开头，随后是一个或多个&quot; <strong>B</strong> &quot;，最后是可选的&quot; <strong>C</strong> &quot;：</p><p><strong>^A*B+C?$</strong></p><p>匹配的示例有：</p><p><strong>AAAAAAAAAAAABBBBBBBBBC</strong></p><p><strong>BC</strong></p><p><strong>B</strong></p><p>不匹配的示例有：</p><p><strong>AAAAA</strong> // 缺少&quot;B&quot;</p><p><strong> AAAABC</strong> // 前导空格</p><p><strong>AABBCC</strong> // &quot;C&quot;太多</p><p>模式的一部分如果被圆括号包围，则被视为子模式（可以从 <strong>smatch</strong> 中单独提取）。例如：</p><p><strong>\\d+-\\d+</strong> // 无子模式</p><p><strong>\\d+(-\\d+)</strong> // 一个子模式</p><p><strong>(\\d+)(-\\d+)</strong> // 两个子模式</p><p>通过添加后缀，模式可以被声明为可选的或重复的（默认是一次）：</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><strong>{n}</strong></td><td>准确出现n次</td></tr><tr><td><strong>{n,}</strong></td><td>至少出现n次</td></tr><tr><td><strong>{n,m}</strong></td><td>至少出现n次，但不超过m次</td></tr><tr><td>* ****</td><td>零次或多次，相当于** {0,}**</td></tr><tr><td><strong>+</strong></td><td>一次或多次，相当于 <strong>{1,}</strong></td></tr><tr><td><strong>?</strong></td><td>可选（零次或一次），相当于 <strong>{0,1}</strong></td></tr></tbody></table><p>例如：</p><p><strong>A{3}B{2,4}C</strong>*</p><p>匹配的示例有：</p><p><strong>AAABBC</strong></p><p><strong>AAABBB</strong></p><p>不匹配的示例有：</p><p><strong>AABBC</strong> // &quot;A&quot;太少</p><p><strong>AAABC</strong> // &quot;B&quot;太少</p><p><strong>AAABBBBBCCC</strong> // &quot;B&quot;太多</p><p>在任何重复符号（ <strong>?</strong> , ***** , <strong>+</strong> 和 <strong>{}</strong> ）之后加上后缀 <strong>?</strong> 会使模式匹配器变得“懒惰”或“非贪婪”。也就是说，在寻找模式时，它会寻找最短的匹配而不是最长的。默认情况下，模式匹配器总是寻找最长的匹配；这被称为“最大吞噬(Max Munch rule)”规则。考虑以下例子： <strong>ababab</strong></p><p>模式 <strong>(ab)+</strong> 匹配整个 <strong>ababab</strong> 。然而， <strong>(ab)+?</strong> 只匹配第一个 <strong>ab</strong> 。</p><p>最常用的字符分类有其名称：</p>`,107)),l(t,null,{default:h(()=>s[0]||(s[0]=[p("strong",null,"字符类",-1)])),_:1}),s[2]||(s[2]=i(`<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>alnum</strong></td><td>任何字母数字字符</td></tr><tr><td><strong>alpha</strong></td><td>任何字母字符</td></tr><tr><td><strong>blank</strong></td><td>任何空白字符（非行分隔符）</td></tr><tr><td><strong>cntrl</strong></td><td>任何控制字符</td></tr><tr><td><strong>d</strong></td><td>任何十进制数字</td></tr><tr><td><strong>digit</strong></td><td>任何十进制数字</td></tr><tr><td><strong>graph</strong></td><td>任何图形字符（可见并可打印，不含空格）</td></tr><tr><td><strong>lower</strong></td><td>任何小写字母字符</td></tr><tr><td><strong>print</strong></td><td>任何可打印字符（包括空格）</td></tr><tr><td><strong>punct</strong></td><td>任何标点字符</td></tr><tr><td><strong>s</strong></td><td>任何空白字符（包括空格、tab等）</td></tr><tr><td><strong>space</strong></td><td>任何空白字符（包括空格、tab等）</td></tr><tr><td><strong>upper</strong></td><td>任何大写字母字符</td></tr><tr><td><strong>w</strong></td><td>任何单词字符（字母数字字符加上下划线）</td></tr><tr><td><strong>xdigit</strong></td><td>任何十六进制数字字符</td></tr></tbody></table><p>在正则表达式中，字符类别名称必须用 <strong>[: :]</strong> 括起来。例如， <strong>[:digit:]</strong> 匹配一个十进制数字。此外，它们必须在定义字符类的 <strong>[ ]</strong> 对中使用。</p><p>几种字符类别支持速记表示法：</p><table><thead><tr><th>正则表达式</th><th>描述</th><th>ASCII字符类等效</th></tr></thead><tbody><tr><td>\\d</td><td>一个十进制数字</td><td>[[:digit:]]</td></tr><tr><td>\\s</td><td>一个空白字符（如空格、制表符等）</td><td>[[:space:]]</td></tr><tr><td>\\w</td><td>一个字母（a-z，A-Z）、数字（0-9）或下划线（_）</td><td>[_[:alnum:]]</td></tr><tr><td>\\D</td><td>非数字字符</td><td>[ˆ[:digit:]]</td></tr><tr><td>\\S</td><td>非空白字符</td><td>[ˆ[:space:]]</td></tr><tr><td>\\W</td><td>非字母、非数字、非下划线字符</td><td>[ˆ_[:alnum:]]</td></tr></tbody></table><p>此外，支持正则表达式的语言通常还提供（非标准）：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>\\l</strong></td><td>A lowercase character</td><td><strong>[[:lower:]]</strong></td></tr><tr><td><strong>\\u</strong></td><td>An uppercase character</td><td><strong>[[:upper:]]</strong></td></tr><tr><td><strong>\\L</strong></td><td>Not \\l</td><td><strong>[ˆ[:lower:]]</strong></td></tr><tr><td><strong>\\U</strong></td><td>Not \\u</td><td><strong>[ˆ[:upper:]]</strong></td></tr></tbody></table><p>为了实现完全的可移植性，请使用字符类别名称而非这些缩写形式。</p><p>作为示例，考虑编写一个描述C++标识符的模式：以下划线或字母开头，后跟可能为空的字母、数字或下划线序列。为了说明其中的细微差别，我包含了一些错误的尝试：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[:alpha:][:alnum:]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 错误：来自集合&quot;:alpha&quot;的字符后面跟着...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[:alpha:]][[:alnum:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 错误：不接受下划线（&#39;_&#39;不是alpha）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([[:alpha:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_)[[:alnum:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 错误：下划线也不属于alnum  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([[:alpha:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_)([[:alnum:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 可行，但笨拙  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[:alpha:]_][[:alnum:]_]</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">*/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/ 正确：在字符类别中包含下划线 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[_[:alpha:]][_[:alnum:]]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 同样正确  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[:alpha:]]\\w*  // \\w等同于[_[:alnum:]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，这里有一个函数，它使用了最简单的 <strong>regex_match()</strong> 版本（§10.4.1），用于测试字符串是否为标识符：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> is_identifier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[_[:alpha:]]</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">w*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 下划线或字母，后跟零个或多个下划线、字母或数字</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> regex_match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s,pat);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在普通字符串字面量中包含反斜杠时需要加倍。使用原始字符串字面量（§10.4）以减轻特殊字符问题。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> is_identifier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">R&quot;([_[:alpha:]]\\w*)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> regex_match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s,pat);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一些模式示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Ax</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">*/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A, Ax, Axxxx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Ax</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Ax, Axxx	不是 A</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\d</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\d</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1-2, 12 	不是 1--2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\w{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\d{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Ab-1234, XX-54321, 22-5432	数字包含在\\w中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(\\d</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\d</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 12:3, 1:23, 123, :123	不是 123:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bs</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BS)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// bs, BS	不是 bS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">aeiouy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]// a, o, u	英语元音，非 x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ˆaeiouy]// x, k	非英语元音，非 e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[aˆeiouy]// a, ˆ, o, u	英语元音或 ˆ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一 <strong>组</strong> （子模式）可能由 <strong>sub_match</strong> 表示，由圆括号界定。如果你需要不定义子模式的圆括号，请使用 <strong>(?:</strong> 而非普通的 <strong>(</strong> 。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(\\s</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(\\d</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 可选的空格、冒号和/或逗号，后跟一个可选的数字</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假设我们对数字前的字符（可能是分隔符）不感兴趣，我们可以写作：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\s</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(\\d</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 可选的空格、冒号和/或逗号，后跟一个可选的数字</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将避免正则表达式引擎不得不存储首个字符： <strong>(?:</strong> 变体只有一个子模式。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><em><em>\\d</em>\\s\\w+</em>*</td><td>无分组（子模式）</td></tr><tr><td><em><em>(\\d</em>)\\s(\\w+)</em>*</td><td>两个分组</td></tr><tr><td><em><em>(\\d</em>)(\\s(\\w+))+</em>*</td><td>两个分组（分组不嵌套）</td></tr><tr><td><strong>(\\s*\\w*)+</strong></td><td>一个分组；一个或多个子模式；仅最后一个 <strong>sub_match</strong> 作为子匹配保存</td></tr><tr><td><strong>&lt;(.*?)&gt;(.*?)&lt;/\\1&gt;</strong></td><td>三个分组； <strong>\\1</strong> 表示“与分组1相同”</td></tr></tbody></table><p>该最后一个模式对于解析XML十分有用，它可以找到标签及标签结束的标记。请注意，我在标签与结束标签之间的子模式使用了非贪婪匹配（即懒惰匹配）， <strong>.∗?</strong> 。如果我使用了单纯的 <strong>.∗</strong> ，对于如下输入可能会导致问题：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Always look on the &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;bright&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; side of &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;life&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对第一个子模式的 <strong>贪婪匹配</strong> 将会使得第一个 <strong>&lt;</strong> 匹配到最后一个 <strong>&gt;</strong> 。这虽然是正确的匹配行为，但很可能并非程序员所期望的结果。</p><p>如需更详尽地了解正则表达式，请参阅[Friedl,1997]。</p><h3 id="_10-4-3-迭代器" tabindex="-1"><a class="header-anchor" href="#_10-4-3-迭代器"><span>10.4.3 迭代器</span></a></h3><p>我们可以定义一个 <strong>regex_iterator</strong> 来迭代字符序列并查找模式匹配。例如，我们可以使用 <strong>sregex_iterator</strong> （一个 <strong>regex_iterator&lt;string&gt;</strong> ）来输出字符串中所有以空白分隔的单词：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string input </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;aa as; asd ++eˆasdf asdfg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    regex pat {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">R&quot;(\\s+(\\w+))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 模式匹配至少一个空白字符后跟一个或多个单词字符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (sregex_iterator </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), pat); p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sregex_iterator{}; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p)[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出每个匹配中的第一个子匹配（即单词）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将输出：</p><p><strong>as</strong></p><p><strong>asd</strong></p><p><strong>asdfg</strong></p><p>我们错过了第一个单词 &quot; <strong>aa</strong> &quot;，因为它前面没有空白字符。如果我们简化模式为 <strong>R&quot;((\\w+))&quot;</strong> ，则会得到：</p><p><strong>as</strong></p><p><strong>asd</strong></p><p><strong>asdfg</strong></p><p><strong>e</strong></p><p><strong>asdf</strong></p><p><strong>asdfg</strong></p><p><strong>regex_iterator</strong> 是一个双向迭代器，因此我们不能直接在只提供输入迭代器的 <strong>istream</strong> 上进行迭代。此外，我们不能通过 <strong>regex_iterator</strong> 进行写操作，并且默认的 <strong>regex_iterator</strong> （ <strong>regex_iterator{}</strong> ）是唯一的序列结束标记。</p><h2 id="_10-5-建议" tabindex="-1"><a class="header-anchor" href="#_10-5-建议"><span>10.5 建议</span></a></h2><ol><li>使用 <strong>std::string</strong> 管理字符序列；§10.2；[CG: SL.str.1]。</li><li>优先使用 <strong>string</strong> 操作而非C风格的字符串函数；§10.1。</li><li>声明变量和成员时使用 <strong>string</strong> 类型，而非作为基类；§10.2。</li><li>通过值返回字符串（依赖移动语义和复制省略）；§10.2，§10.2.1；[CG: F.15]。</li><li>直接或间接地，使用 <strong>substr()</strong> 读取子串，用 <strong>replace()</strong> 写入子串；§10.2。</li><li>字符串可以根据需要增长和缩小；§10.2。</li><li>当需要范围检查时，使用 <strong>at()</strong> 而非迭代器或 <strong>[]</strong> ；§10.2，§10.3。</li><li>为优化速度时，使用迭代器和 <strong>[]</strong> 而非 <strong>at()</strong> ；§10.2，§10.3。</li><li>使用范围 <strong>for</strong> 循环安全地最小化范围检查；§10.2，§10.3。</li><li><strong>字符串</strong> 输入不会溢出；§10.2，§11.3。</li><li>仅在必要时，使用 <strong>c_str()</strong> 或 <strong>data()</strong> 生成字符串的C风格表示；§10.2。</li><li>对于字符串到数字的转换，使用 <strong>stringstream</strong> 或通用值提取函数（如 <strong>to&lt;X&gt;</strong> ）；§11.7.3。</li><li><strong>basic_string</strong> 可以用于创建任意类型的字符序列；§10.2.1。</li><li>使用 <strong>s</strong> 后缀标记意图作为标准库字符串的字符串字面量；§10.3 [CG: SL.str.12]。</li><li>对于需要读取多种方式存储的字符序列的函数参数，使用 <strong>string_view</strong> ；§10.3 [CG: SL.str.2]。</li><li>对于需要写入多种方式存储的字符序列的函数参数，使用 <strong>string_span&lt;char&gt;</strong> ；§10.3。[CG: SL.str.2] [CG: SL.str.11]。</li><li>将 <strong>string_view</strong> 视为一种附加了大小信息的指针；它并不拥有其字符；§10.3。</li><li>使用 <strong>sv</strong> 后缀标记意图作为标准库 <strong>string_view</strong> 的字符串字面量；§10.3。</li><li>对于大多数常规的正则表达式用途，使用 <strong>regex</strong> ；§10.4。</li><li>除最简单模式外，优先使用原始字符串字面量表达模式；§10.4。</li><li>使用 <strong>regex_match()</strong> 匹配整个输入；§10.4，§10.4.2。</li><li>使用 <strong>regex_search()</strong> 在输入流中搜索模式；§10.4.1。</li><li>正则表达式符号可以调整以符合各种标准；§10.4.2。</li><li>默认的正则表达式符号集遵循ECMAScript标准；§10.4.2。</li><li>保持克制；正则表达式很容易变成只写语言；§10.4.2。</li><li>注意 <strong>\\i</strong> （其中 <strong>i</strong> 为数字）允许你根据之前的子模式来表达子模式；§10.4.2。</li><li>使用 <strong>?</strong> 使模式变为“懒惰”匹配；§10.4.2。</li><li>使用 <strong>regex_iterators</strong> 遍历流寻找模式；§10.4.3。</li></ol>`,42))])}const y=a(g,[["render",A],["__file","index.html.vue"]]),F=JSON.parse('{"path":"/cpp/chapter10/","title":"第10章 字符串和正则表达式","lang":"zh-CN","frontmatter":{"permalink":"/cpp/chapter10/","description":"第10章 字符串和正则表达式 优先选择标准而非非主流——Strunk & White 简介 字符串 ​ string 实现 字符串视图 正则表达式 ​ 搜索； ​ 正则表达式表示法； ​ 迭代器 建议 10.1 简介 文本操作是大多数程序的重要组成部分。C++标准库提供了一种 string 类型，以避免大多数用户通过指针进行C风格的字符数组操作。 st...","head":[["meta",{"property":"og:url","content":"https://blog.nfzwy.com/cpp/chapter10/"}],["meta",{"property":"og:site_name","content":"南风文档"}],["meta",{"property":"og:title","content":"第10章 字符串和正则表达式"}],["meta",{"property":"og:description","content":"第10章 字符串和正则表达式 优先选择标准而非非主流——Strunk & White 简介 字符串 ​ string 实现 字符串视图 正则表达式 ​ 搜索； ​ 正则表达式表示法； ​ 迭代器 建议 10.1 简介 文本操作是大多数程序的重要组成部分。C++标准库提供了一种 string 类型，以避免大多数用户通过指针进行C风格的字符数组操作。 st..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.nfzwy.com/cpp_img/1001.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T04:47:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T04:47:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第10章 字符串和正则表达式\\",\\"image\\":[\\"https://blog.nfzwy.com/cpp_img/1001.png\\",\\"https://blog.nfzwy.com/cpp_img/1002.png\\"],\\"dateModified\\":\\"2024-11-08T04:47:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"南风\\",\\"url\\":\\"https://blog.nfwzy.com\\"}]}"]]},"headers":[{"level":2,"title":"10.1 简介","slug":"_10-1-简介","link":"#_10-1-简介","children":[]},{"level":2,"title":"10.2 字符串","slug":"_10-2-字符串","link":"#_10-2-字符串","children":[{"level":3,"title":"10.2.1 字符串实现","slug":"_10-2-1-字符串实现","link":"#_10-2-1-字符串实现","children":[]}]},{"level":2,"title":"10.3 字符串视图","slug":"_10-3-字符串视图","link":"#_10-3-字符串视图","children":[]},{"level":2,"title":"10.4 正则表达式","slug":"_10-4-正则表达式","link":"#_10-4-正则表达式","children":[{"level":3,"title":"10.4.1 搜索","slug":"_10-4-1-搜索","link":"#_10-4-1-搜索","children":[]},{"level":3,"title":"10.4.2 正则表达式符号","slug":"_10-4-2-正则表达式符号","link":"#_10-4-2-正则表达式符号","children":[]},{"level":3,"title":"10.4.3 迭代器","slug":"_10-4-3-迭代器","link":"#_10-4-3-迭代器","children":[]}]},{"level":2,"title":"10.5 建议","slug":"_10-5-建议","link":"#_10-5-建议","children":[]}],"git":{"createdTime":1729937676000,"updatedTime":1731041255000,"contributors":[{"name":"nfzwy","email":"nfzwy@南风","commits":4}]},"readingTime":{"minutes":19.05,"words":5714},"filePathRelative":"a tour of c++/第10章 字符串和正则表达式.md","localizedDate":"2024年10月26日","excerpt":"\\n<p>优先选择标准而非非主流——Strunk &amp; White</p>\\n<ul>\\n<li>\\n<p>简介</p>\\n</li>\\n<li>\\n<p>字符串</p>\\n<p>​ <strong>string</strong> 实现</p>\\n</li>\\n<li>\\n<p>字符串视图</p>\\n</li>\\n<li>\\n<p>正则表达式</p>\\n<p>​\\t搜索；</p>\\n<p>​\\t正则表达式表示法；</p>\\n<p>​\\t迭代器</p>\\n</li>\\n<li>\\n<p>建议</p>\\n</li>\\n</ul>\\n<h2>10.1 简介</h2>\\n<p>文本操作是大多数程序的重要组成部分。C++标准库提供了一种 <strong>string</strong> 类型，以避免大多数用户通过指针进行C风格的字符数组操作。 <strong>string_view</strong> 类型使我们能够以任意方式操纵字符序列（例如，在 <strong>std::string</strong> 或 <strong>char[]</strong> 中）。此外，还提供了正则表达式匹配功能，以帮助在文本中查找模式。正则表达式以一种与大多数现代语言中常见的形式提供。 <strong>string</strong> 和 <strong>regex</strong> 对象都可以使用多种字符类型（例如，Unicode）。</p>","autoDesc":true}');export{y as comp,F as data};
